from tkinter import *
from glob import *

import sys
import os
import pickle
import struct
import sqlite3
import subprocess
import threading
import socketserver
import socket
import cv2
import time

src = "D:/Potal/semp/"
filist = glob("D:/Potal/semp/DataDB.py")

def date():
    now = time.localtime()
    data7 = ("%04d-%02d-%02d %02d:%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min))
    return data7
class EchoRequestHandler(socketserver.BaseRequestHandler):
    def setup(self):
        T.insert(END,self.client_address[0]+' connected!!'+"       "+ date() + '\n')

    def handle(self):
        try:
            la_con.configure(text="Client: Connecting...", foreground="red")

            data = b""
            payload_size = struct.calcsize(">L")
            image_counter= 0

            while True:

                while len(data) < payload_size:
                    print("Recv: {}".format(len(data)))
                    data += self.request.recv(4096)

                print("Done Recv: {}".format(len(data)))
                packed_msg_size = data[:payload_size]
                data = data[payload_size:]
                msg_size = struct.unpack(">L", packed_msg_size)[0]
                print("msg_size: {}".format(msg_size))

                while len(data) < msg_size:
                    data += self.request.recv(4096)

                frame_data = data[:msg_size]
                data = data[msg_size:]

                frame = pickle.loads(frame_data, fix_imports=True, encoding="bytes")
                frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)

                filename = './image/'+date()+"_"+str(image_counter)+'.jpg'
                cv2.imwrite(filename, frame, params=[cv2.IMWRITE_JPEG_QUALITY, 100])
                threading.Thread(target= insert_data, args=(filename,image_counter,)).start()
                image_counter += 1
                cv2.imshow('Frame', frame)

                key = cv2.waitKey(25)

                if key == 27:
                    cv2.destroyAllWindows()

        except:
            la_con.configure(text="Client: Disconnecting...",foreground="black")
            T.insert(END,self.client_address[0]+' disconnected!!'+"       "+ date() + '\n')

    def finish(self):
        self.request.close()

class SocksServer(socketserver.ThreadingTCPServer):
    def __init__(self, listen_addr):
        socketserver.ThreadingTCPServer.__init__(self, listen_addr, EchoRequestHandler)

        self.allow_reuse_address = True

        self.daemon_threads = True

        self.request_queue_size = 50

    def stop(self):
        self.shutdown()

    def start(self):
        self.serve_forever()

def insert_data(in_data1,image_counter):
    con, cur = None, None

    # Image_addr,date
    data1, data2 = "", ""
    sql = ""
    now = time.localtime()

    con = sqlite3.connect(src +"userDB")  # DB에 연결
    cur = con.cursor()
    cur.execute("SELECT * FROM datatable")  # 저장된 DB 출력

    data1= in_data1
    if bool(data1) == True:
        T.insert(END, date() + "침입자 발생 경찰에 연락했습니다."+'\n')
    data2= ("%04d-%02d-%02d %02d:%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min))


    sql = "INSERT INTO dataTable VALUES('" + data1 + "','"+ data2  + "')"
    cur.execute(sql)

    con.commit()  # DB에 저장
    con.close()  # DB 종료

def runserve(host,port):
    ser = SocksServer((host, port)).start()

def DataDB():
    subprocess.call(["python.exe",filist])

def close():
    server.destroy()

if __name__ == '__main__':
    host =socket.gethostname()
    port = 9999

    server = Tk()
    server.title("Server")
    server.geometry("800x600")
    server.resizable(False, False)
    server.config(background="white")

    edtframe = Frame(server)
    edtframe.configure(bg="white")
    edtframe.pack(side =RIGHT)
    ser = threading.Thread(target=runserve, args=(host,port,)).start()

    la_ser = Label(server, text="Server", font=("바탕", 30), foreground="blue", background="white")
    la_con = Label(server, text="Client: Disconnecting...", font=("바탕", 15),foreground="black",background="white")
    la_con_ph = Label(server, text="Phone: Disconnecting...", font=("바탕", 15), foreground="black", background="white")

    btn_close = Button(server, text="Close", background="white", command=close)
    btn_DB = Button(server, text="DB", background="white", command=DataDB)

    s =Scrollbar(edtframe)
    T= Text(edtframe)
    T.focus_set()
    s.config(command = T.yview)
    T.config(yscrollcommand =s.set, state=NORMAL)

    s1 = Scrollbar(edtframe)
    T1 = Text(edtframe)
    T1.focus_set()
    s1.config(command=T.yview)
    T1.config(yscrollcommand=s.set, state=NORMAL)


    la_ser.place(x=300, y=20)
    la_con.place(x=500, y=100)
    la_con_ph.place(x=50, y=100)


    btn_close.place(x=600, y=450, width=100, height=50)
    btn_DB.place(x=50, y=450, width=100, height=50)

    s.pack(side=RIGHT, fill=Y)
    T.pack(side=RIGHT, fill=Y)

    s1.pack(side=RIGHT, fill=Y)
    T1.pack(side=RIGHT, fill=Y)

    server.mainloop()
