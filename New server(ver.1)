from tkinter import *
from tkinter import messagebox
from glob import *

from matplotlib import animation
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg,NavigationToolbar2Tk
import matplotlib.pyplot as plt
import random

import sys
import subprocess
import sqlite3
import threading
import socketserver
import random

# Part of variable declare #
filist = glob("D:/PyProgram/Cvproject/DataDB.py")

# Part of function(or class) declare #
class EchoRequestHandler(socketserver.BaseRequestHandler):
    # Called before the handle()  method to perform any initialization actions required.
    def setup(self):
        print (self.client_address[0], 'connected!!')

    def handle(self):
        try:
            la_con.configure(text="Connecting...", foreground="red")

            while (True):
                data = self.request.recv(1024).strip()
                stringdata = data.decode(encoding = 'utf-8')
                print(stringdata)
                # clean_up_data(stringdata)

                if data:
                    self.request.send(data)
                else:
                    self.request.close()
                if data == "-1":
                    la_con.configure(text="Disconnecting...", foreground="black")
                    break
        except:
            la_con.configure(text="Disconnecting...",foreground="black")
            messagebox.showerror("Erorr", "connecting Failed")

    # Called after the handle()  method to perform any clean-up actions required.
    def finish(self):
        self.request.close()
class SocksServer(socketserver.ThreadingTCPServer):
    def __init__(self, listen_addr):
        socketserver.ThreadingTCPServer.__init__(self, listen_addr, EchoRequestHandler)
        # Whether the server will allow the reuse of an address.
        self.allow_reuse_address = True
        #
        self.daemon_threads = True
        # request_queue_size
        self.request_queue_size = 50

    def stop(self):
        self.shutdown()

    def start(self):
        self.serve_forever()


class shape():
    x,c= 0,''
    i=30

    def drawshape(self):
        raise NotImplementedError()
class rectangle(shape):
    objects =None
    def __init__(self,x,c,a):
        self.x = x
        self.c = c
        self.drawshape()
        self.a = a


    def drawshape(self):
        x= self.x; c= self.c

        squrelist=[]
        self.rect =plt.Rectangle((x,0),width=10, height=10,fc= c)
        recting = threading.Thread(target=self.update_height, args=(self.i,self.rect,))
        squrelist.append(self.rect)
        self.objects =squrelist
        self.fig = plt.gcf()
        self.ani =animation.FuncAnimation(self.fig, self.update_height,fargs=(self.rect,),frames= self.i, interval=100)

        ax.add_patch(self.rect)

        self.canvas = FigureCanvasTkAgg(plt.gcf(), master=server)
        self.canvas.get_tk_widget().place(x=500, y=200)

    def update_height(self,i,rect):
        height = self.a
        rect.set_height(height)

        return rect

def clean_up_data(stringdata):
    # conv_data = stringdata

    # conv_data.split(",")
    # data1 =conv_data[0]
    # data2 =conv_data[1]
    # data3 =conv_data[2]
    # data4 =conv_data[3]
    # data5 =conv_data[4]
    # data6 =conv_data[5]
    # data7 =conv_data[6]

    # insert_data(data1, data2, data3, data4, data5, data6, data7)
    # monitoring(data2, data3, data4, data5, data6)
    pass

def insert_data(data1, data2, data3, data4, data5, data6, data7):

    con, cur = None, None

    # image, sensor1, sensor2, sensor3, sensor4, sensor5, datetime
    data1, data2, data3, data4, data5, data6, data7 ="","","", "", "", "", ""
    sql = ""

    con = sqlite3.connect("D:/PYTHON/python_DB/userDB") # DB에 연결
    cur = con.cursor() # DB실행 혹은 리턴 통로 역활

    try:
        sql = "INSERT INTO userTable VALUES('" + data1 + "','" + data2 + "','" + data3 + "'," + data4 +"'," + data5 +"'," + data6 +"'," + data7 + ")"
        cur.execute(sql)
    except :
        messagebox.showerror('ERROR','데이터 입력 오류')
    else:
        messagebox.showinfo('Succesfull','데이터 입력 성공')

    con.commit() # DB save1
    con.close() # DB close
def runserve(host,port):
    ser = SocksServer((host, port))
    ser.start()
def DataDB():
    subprocess.call(["python.exe",filist])
def close():
    server.destroy()
def monitoring():
    a = random.randrange(0, 55)
    rect1 = rectangle(x=20, c='r',a =a)
    rect2 = rectangle(x=40, c='g',a =a)
    rect3 = rectangle(x=60, c='b',a =a)
    rect4 = rectangle(x=80, c='orange',a =a)
    rect5 = rectangle(x=100,c='black',a =a)
# Part of the Main code #
if __name__ == '__main__':
    host = '192.168.0.16'
    port = 9999

    server = Tk()
    server.title("Server")
    server.geometry("1200x800")
    server.resizable(False, False)
    server.config(background="white")

    ax = plt.axes(xlim=(0, 120), ylim=(0, 100))  # 가로 0~100, 세로 0~100
    ax.set_aspect('equal')

    plt.title("Sensor Monitoring")
    monitoring()


    ser = threading.Thread(target=runserve, args=(host,port,)).start()



    la_ser = Label(server, text="SERVER", font=("바탕", 30), foreground="blue", background="white")
    la_con = Label(server, text="Disconnecting...", font=("바탕", 15),foreground="black",background="white")

    btn_close = Button(server, text="Close", background="white", command=close)
    btn_DB = Button(server, text="DB", background="white", command=DataDB)


    la_ser.place(x=100, y=50)
    la_con.place(x=750, y=50)


    btn_close.place(x=100, y=700, width=100, height=50)
    btn_DB.place(x=1000, y=700, width=100, height=50)

    server.mainloop()

