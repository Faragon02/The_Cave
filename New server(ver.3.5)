from tkinter import *
from glob import *
from os.path import exists

import sys
import os
import pickle
import struct
import sqlite3
import subprocess
import threading
import socketserver
import socket
import cv2
import time

src = "D:/PyProgram/Cvproject/"
filist = glob("D:/PyProgram/Cvproject/DataDB.py")

N =0x00 # it's get one data. same Erorr

def date():
    now = time.localtime()
    data7 = ("%04d-%02d-%02d_%02d_%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min))
    return data7

def DataDB():
    subprocess.call(["python.exe", filist])

def close():
    server.destroy()

def insert_data(image_counter):
    con, cur = None, None

    # Image_addr,date #
    data1, data2, data3, data4, data5, data6 = "", "", "", "", "", ""
    sql = ""
    now = time.localtime()

    con = sqlite3.connect("D:/PyProgram/Cvproject/userDB")  # DB에 연결
    cur = con.cursor()
    cur.execute("SELECT * FROM datatable")  # 저장된 DB 출력

    data1 ='cat_'+ date()+"_"+str(image_counter)+'.jpg'

    if bool(data1) == True:
        T.insert(END, date() + "침입자 발생!!" + '\n')

    data2 = ("%04d" % (now.tm_year)); data3 = ("%02d" % (now.tm_mon))
    data4 = ("%02d" % (now.tm_mday)); data5 = ("%02d" % (now.tm_hour))
    data6 = ("%02d" % (now.tm_min))

    sql = "INSERT INTO dataTable VALUES('" + data1 + "','" + data2 + "','" + data3 + "','" + data4 + "','" + data5 + "','" + data6 + "')"
    cur.execute(sql)

    con.commit()
    con.close()

def select_case1(Year, Month):
    strdata1= []

    try:

        con = sqlite3.connect("D:/PyProgram/Cvproject/userDB")
        cur = con.cursor()


        sql = "SELECT * FROM datatable where Year ='" + Year+"'and Month ='" + Month +"'"
        cur.execute(sql)

        # Data 조회
        while (True):

            row = cur.fetchone()  # DB 조회 호출
            if row == None:  # 들어온 것이 없다.
                break  # 종료
            strdata1.append(row[0])
        con.commit()
        con.close()
        return strdata1
    except:
        return None

def select_case2(Year, Month, Day):
    strdata1, strdata2, strdata3, strdata4, strdata5, strdata6 = [], [], [], [], [], []

    try:

        con = sqlite3.connect("D:/PyProgram/Cvproject/userDB")
        cur = con.cursor()

        sql = "SELECT * FROM datatable where Year ='" + Year + "'and Month ='" + Month +'and Day ='+Day+"'"
        cur.execute(sql)

        # Data 조회
        while (True):

            row = cur.fetchone()  # DB 조회 호출
            if row == None:  # 들어온 것이 없다.
                break  # 종료
            strdata1.append(row[0])
            for name in strdata1:
                return name
        con.commit()
        con.close()

    except:
        return None

def select_case3(Year, Month, Day, Hour):
    strdata1, strdata2, strdata3, strdata4, strdata5, strdata6 = [], [], [], [], [], []

    try:

        con = sqlite3.connect("D:/PyProgram/Cvproject/userDB")
        cur = con.cursor()

        sql = "SELECT * FROM datatable where Year ='" + Year + "'and Month ='" + Month +'and Day ='+Day+"'and Hour'"+Hour+"'"
        cur.execute(sql)

        # Data 조회
        while (True):

            row = cur.fetchone()  # DB 조회 호출
            if row == None:  # 들어온 것이 없다.
                break  # 종료
            strdata1.append(row[0])
            for name in strdata1:
                return name
        con.commit()
        con.close()

    except:
        return None

def select_case4(Year, Month, Day,Hour,Minute):
    strdata1, strdata2, strdata3, strdata4, strdata5, strdata6 = [], [], [], [], [], []

    try:

        con = sqlite3.connect("D:/PyProgram/Cvproject/userDB")
        cur = con.cursor()

        sql = "SELECT * FROM datatable where Year ='" + Year + "'and Month ='" + Month +\
              'and Day ='+Day+"'and Hour'"+Hour+"'and Minute'"+Minute+"'"
        cur.execute(sql)

        # Data 조회
        while (True):

            row = cur.fetchone()  # DB 조회 호출
            if row == None:  # 들어온 것이 없다.
                break  # 종료
            strdata1.append(row[0])
            for name in strdata1:
                return name
        con.commit()
        con.close()

    except:
        return None

class usermanger:
    def __init__(self):
        self.users = {}


    def adduser(self, dev_name,conn,addr):
        if usermanger in self.users:
            conn.send('이미 접속중입니다.\n'.encode())
            return None

        lock.acquire()
        self.users[dev_name] = (conn,addr)
        T.insert(END, str(dev_name) + ":" + str(addr) + ' connected!!' + "          " + date() + '\n')
        lock.release()
        if dev_name == "Robot":
            la_con.configure(text="Client: Connecting...", foreground="red")
        if dev_name == "Phone":
            la_con_ph.configure(text = "Phone: Connecting...",foreground= "Red")

        T.insert(END,'{} 접속했습니다\n'.format(dev_name))
        return dev_name


    def remove(self, dev_name):
        if dev_name not in self.users:
            return

        lock.acquire()
        del self.users[dev_name]
        lock.release()

        T.insert(END, "'" + host + "'")
        if dev_name == "Robot":
            la_con.configure(text="Client: Disconnecting...", foreground="black")

        if dev_name == "Phone":
            la_con_ph.configure(text="Phone: Disconnecting...", foreground="black")

        T.insert(END,'{} 접속해제 됬습니다.\n'.format(dev_name))

# Robot & PC #
class RobotHandler(socketserver.BaseRequestHandler):
    device = usermanger()

    def handle(self):
        global  dev_name
        filename = []

        try:
            dev_name = self.registerUsername()


            while True:
                if dev_name == 'Robot':
                    data = b""
                    payload_size = struct.calcsize(">L")
                    image_counter = 0
                    while len(data) < payload_size:
                        # print(
                        # "Recv: {}".format(len(data)))
                        data += self.request.recv(4096)
                        print(data)

                    # print("Done Recv: {}".format(len(data)))
                    packed_msg_size = data[:payload_size]
                    data = data[payload_size:]
                    msg_size = struct.unpack(">L", packed_msg_size)[0]
                    # print("msg_size: {}".format(msg_size))

                    while len(data) < msg_size:
                        data += self.request.recv(4096)
                    frame_data = data[:msg_size]
                    data = data[msg_size:]
                    frame = pickle.loads(frame_data, fix_imports=True, encoding="bytes")
                    frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)
                    filename = src + 'cat_' + date() + "_" + str(image_counter) + '.jpg'
                    cv2.imwrite(filename, frame, params=[cv2.IMWRITE_JPEG_QUALITY, 100])

                    # threading.Thread(target=insert_data, args=(image_counter,)).start()
                    image_counter += 1

                    cv2.imshow('Frame', frame)
                    key = cv2.waitKey(25)
                    if key == 27:
                        cv2.destroyAllWindows()
                        break

                if dev_name == 'Phone':
                    data1 = self.request.recv(1024).decode(encoding='utf-8')
                    data = data1.split(',')
                    print(data)

                    if len(data) == 1:
                        self.request.send(N.encode())
                    if len(data) == 2:
                        filename = select_case1(data[0], data[1])
                    if len(data) == 3:
                        filename = select_case2(data1[0], data1[1], data1[2])
                    if len(data) == 4:
                        filename = select_case3(data1[0], data1[1], data1[2], data1[3])
                    if len(data) == 5:
                        filename = select_case4(data1[0], data1[1], data1[2], data1[3], data1[4])

                    def sneding_imgname():
                        while True:
                            try:
                                data = yield
                                self.request.send(data.encode())
                                if data == "-1":
                                        break
                            except StopIteration as e:
                                print(e)

                    def sneding_image():
                        try:
                            while True:
                                data = yield
                                with open(data, "rb") as f:
                                    f.read()
                                    self.request.send(f)
                                    if data == "-1":
                                        break
                        except StopIteration as e:
                            print(e)

                    co = sneding_imgname()
                    next(co)

                    co1 = sneding_image()
                    next(co1)

                    for i in range(0, len(filename)):
                        time.sleep(0.1)
                        co.send(filename[i])
                        co1.send(filename[i])

        except Exception as e:

            T.insert(END, e)
            T.insert(END, '\n')

        self.device.remove(dev_name)
    def registerUsername(self):
        while True:
            self.request.send('Device:'.encode())
            dev_name = self.request.recv(1024)
            dev_name = dev_name.decode().strip()
            if self.device.adduser(dev_name, self.request, self.client_address[0]):
                return dev_name

    def finish(self):
        self.request.close()

class mainServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

def run_mainserver(host,port):
    try:
        ser = mainServer((host,port),RobotHandler)
        ser.serve_forever()
    except Exception as e:
        server.shutdown()
        server.server_close()


# Part of the Main code #
if __name__ == '__main__':
    src = "D:/PyProgram/Cvproject/semp/"
    lock = threading.Lock()
    location = socket.gethostname()
    host= "192.168.0.16"

    port = 9999

    server = Tk()
    server.title("Server")
    server.geometry("1000x600")
    server.resizable(False, False)
    server.config(background="white")

    edtframe = Frame(server)
    edtframe.configure(bg="white")
    edtframe.pack(side=RIGHT)

    ser = threading.Thread(target=run_mainserver, args=(host,port,)).start()
    la_ser = Label(server, text="Paragon Security Server", font=("바탕", 30), foreground="blue", background="white")
    la_con = Label(server, text="Client: Disconnecting...", font=("바탕", 15), foreground="black", background="white")
    la_con_ph = Label(server, text="Phone: Disconnecting...", font=("바탕", 15), foreground="black",
                      background="white")

    btn_close = Button(server, text="Close", background="white", command=close)
    btn_DB = Button(server, text="DB", background="white", command=DataDB)

    s = Scrollbar(edtframe)
    T = Text(edtframe)
    T.focus_set()
    s.config(command=T.yview)
    T.config(yscrollcommand=s.set, state=NORMAL)

    la_ser.place(x=300, y=20)
    la_con.place(x=500, y=100)
    la_con_ph.place(x=50, y=100)

    btn_DB.place(x=50, y=150, width=100, height=50)
    btn_close.place(x=50, y=450, width=100, height=50)

    s.pack(side=RIGHT, fill=Y)
    T.pack(side=RIGHT, fill=Y)

    server.mainloop()
